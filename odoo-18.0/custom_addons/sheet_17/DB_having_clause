-- Createing table for sale_order
CREATE TABLE sale_order (
    id SERIAL PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    customer_id INT NOT NULL,
    total NUMERIC(12, 2) DEFAULT 0,
    order_date TIMESTAMP DEFAULT NOW()
);

-- Insert values in sale orders
INSERT INTO sale_order (name, customer_id, total) VALUES
('SO001', 101, 500),
('SO002', 102, 700);

--Creating table for sale_order_line 
CREATE TABLE sale_order_line (
    id SERIAL PRIMARY KEY,
    order_id INT NOT NULL REFERENCES sale_order(id) ON DELETE CASCADE,
    product_id INT NOT NULL,
    quantity INT DEFAULT 1,
    price NUMERIC(12, 2) DEFAULT 0,
    total NUMERIC(12, 2) GENERATED ALWAYS AS (quantity * price) STORED
);

-- Insert calues in sale order lines
INSERT INTO sale_order_line (order_id, product_id, quantity, price) VALUES
(1, 201, 2, 100), 
(1, 202, 3, 100), 
(2, 203, 7, 100); 

--Query
CREATE OR REPLACE VIEW v_sale_order_summary AS
WITH order_data AS (
    SELECT
        so.id      AS sale_order_id,
        so.name    AS sale_order_name,
        so.total   AS sale_order_total,
        sol.id     AS sale_order_line_id,
        sol.total  AS sale_order_line_total
    FROM
        sale_order so
    INNER JOIN
        sale_order_line sol
        ON so.id = sol.order_id
)
SELECT
    sale_order_id,
    sale_order_name,
    SUM(sale_order_total) AS total_order_amount,
    SUM(sale_order_line_total) AS total_line_amount,
    COUNT(sale_order_line_id) AS total_lines
FROM
    order_data
GROUP BY
    sale_order_id, sale_order_name
HAVING
    SUM(sale_order_line_total) > 200  
ORDER BY
    total_line_amount DESC
LIMIT 5;

--for result 
SELECT * FROM v_sale_order_summary;
